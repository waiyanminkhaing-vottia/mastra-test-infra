name: Manage Infrastructure

on:
  workflow_dispatch:
    inputs:
      action:
        description: 'Action to perform'
        required: true
        default: 'plan'
        type: choice
        options:
        - plan
        - apply
        - destroy

env:
  TF_VERSION: '1.7.0'

jobs:
  terraform:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ vars.AWS_REGION || 'ap-northeast-1' }}

    - name: Terraform Init
      run: |
        cd terraform
        terraform init

    - name: Terraform Validate
      if: github.event.inputs.action != 'destroy'
      run: |
        cd terraform
        terraform validate

    - name: Terraform Plan
      id: plan
      run: |
        cd terraform
        echo "Running terraform plan..."
        terraform plan -out=tfplan -detailed-exitcode
      continue-on-error: true
      env:
        TF_IN_AUTOMATION: true

    - name: Terraform Plan Status
      if: steps.plan.outcome == 'failure'
      run: exit 1

    - name: Terraform Apply
      if: github.event.inputs.action == 'apply'
      run: |
        cd terraform
        terraform apply -auto-approve tfplan
      env:
        TF_IN_AUTOMATION: true

    - name: Terraform Destroy
      if: github.event.inputs.action == 'destroy'
      run: |
        cd terraform
        echo "üóëÔ∏è Destroying infrastructure..."
        echo "Checking Terraform state..."
        if [ -f terraform.tfstate ]; then
          echo "State file exists, refreshing state..."
          terraform refresh || echo "State refresh completed with warnings"
          echo "Listing current resources in state..."
          terraform state list || echo "No resources in state"
        else
          echo "‚ö†Ô∏è No state file found - resources may need manual cleanup"
        fi
        terraform destroy -auto-approve

        # Manual cleanup if Terraform state is missing
        echo "Performing manual cleanup of AWS resources..."

        # Delete Route53 DNS record
        echo "Deleting Route53 DNS record..."
        aws route53 list-hosted-zones --query "HostedZones[?Name=='dev-maestra.vottia.me.'].Id" --output text | while read ZONE_ID; do
          if [ ! -z "$ZONE_ID" ]; then
            RECORD_EXISTS=$(aws route53 list-resource-record-sets --hosted-zone-id $ZONE_ID --query "ResourceRecordSets[?Name=='test.dev-maestra.vottia.me.' && Type=='A']" --output text)
            if [ ! -z "$RECORD_EXISTS" ]; then
              IP_ADDRESS=$(aws route53 list-resource-record-sets --hosted-zone-id $ZONE_ID --query "ResourceRecordSets[?Name=='test.dev-maestra.vottia.me.' && Type=='A'].ResourceRecords[0].Value" --output text)
              aws route53 change-resource-record-sets --hosted-zone-id $ZONE_ID --change-batch "{\"Changes\":[{\"Action\":\"DELETE\",\"ResourceRecordSet\":{\"Name\":\"test.dev-maestra.vottia.me\",\"Type\":\"A\",\"TTL\":300,\"ResourceRecords\":[{\"Value\":\"$IP_ADDRESS\"}]}}]}" || echo "DNS record already deleted or not found"
              echo "DNS record deleted"
            fi
          fi
        done

        # Detach static IP
        echo "Detaching static IP..."
        aws lightsail detach-static-ip --static-ip-name dev-mastra-test-static-ip || echo "Static IP already detached or not found"

        # Delete Lightsail instance
        echo "Deleting Lightsail instance..."
        aws lightsail delete-instance --instance-name dev-mastra-test-instance || echo "Instance already deleted or not found"

        # Delete static IP
        echo "Deleting static IP..."
        aws lightsail release-static-ip --static-ip-name dev-mastra-test-static-ip || echo "Static IP already deleted or not found"

        # Delete key pair
        echo "Deleting key pair..."
        aws lightsail delete-key-pair --key-pair-name dev-mastra-test-key || echo "Key pair already deleted or not found"

        echo "‚úÖ Infrastructure destroyed"
      env:
        TF_IN_AUTOMATION: true

    - name: Wait and verify services
      if: github.event.inputs.action == 'apply'
      run: |
        cd terraform

        # Get connection details
        INSTANCE_IP=$(terraform output -raw instance_public_ip)
        SSH_KEY=$(terraform output -raw ssh_private_key)

        # Setup SSH
        mkdir -p ~/.ssh
        echo "$SSH_KEY" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H $INSTANCE_IP >> ~/.ssh/known_hosts

        echo "Waiting for instance setup to complete..."

        # Verify services are running
        ssh -o ConnectTimeout=10 ec2-user@$INSTANCE_IP << 'EOF'
          # Check Docker service
          echo "Checking Docker service..."
          if sudo systemctl is-active docker >/dev/null; then
            echo "‚úÖ Docker service is active"
            echo "Docker version: $(sudo docker --version)"
          else
            echo "‚ùå Docker service is not active"
          fi

          # Check Nginx service
          echo "Checking Nginx service..."
          if sudo systemctl is-active nginx >/dev/null; then
            echo "‚úÖ Nginx service is active"
            echo "Nginx version: $(nginx -v 2>&1)"
          else
            echo "‚ùå Nginx service is not active"
          fi

          # Test basic nginx response
          echo "Testing nginx basic response..."
          if curl -s --connect-timeout 5 -o /dev/null -w "%{http_code}" localhost | grep -q "200\|404"; then
            echo "‚úÖ Nginx is responding"
          else
            echo "‚ö†Ô∏è Nginx not responding yet"
          fi

          # Check Docker registry (only accessible via SSH tunnel)
          echo "Checking Docker registry..."
          if docker ps | grep -q local-registry; then
            echo "‚úÖ Docker registry container is running"
            if curl -s --connect-timeout 5 localhost:5000/v2/ | grep -q "{}"; then
              echo "‚úÖ Docker registry is responding to API calls (localhost only)"
              echo "‚ÑπÔ∏è  Registry is only accessible via SSH tunnel: ssh -L 5000:localhost:5000 ec2-user@<instance-ip>"
            else
              echo "‚ö†Ô∏è Docker registry not responding to API calls"
            fi
          else
            echo "‚ùå Docker registry container is not running"
          fi
        EOF

    - name: Output Instance Info
      if: github.event.inputs.action == 'apply'
      run: |
        cd terraform
        echo "## Infrastructure Outputs" >> $GITHUB_STEP_SUMMARY
        terraform output -json | jq -r 'to_entries[] | "- **\(.key)**: \(.value.value)"' >> $GITHUB_STEP_SUMMARY
