name: Manage Infrastructure

on:
  workflow_dispatch:
    inputs:
      action:
        description: 'Action to perform'
        required: true
        default: 'plan'
        type: choice
        options:
        - plan
        - apply
        - destroy

env:
  TF_VERSION: '1.7.0'

jobs:
  terraform:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ vars.AWS_REGION || 'ap-northeast-1' }}

    - name: Terraform Init
      run: |
        cd terraform
        terraform init

    - name: Terraform Plan
      id: plan
      run: |
        cd terraform
        terraform plan -out=tfplan
      continue-on-error: true
      env:
        TF_IN_AUTOMATION: true

    - name: Terraform Plan Status
      if: steps.plan.outcome == 'failure'
      run: exit 1

    - name: Terraform Apply
      if: github.event.inputs.action == 'apply'
      run: |
        cd terraform
        # Try with existing resources first
        terraform apply -auto-approve tfplan || {
          echo "⚠️  Apply failed, trying with existing key pair..."
          echo "This is normal for development if resources already exist"
          terraform apply -auto-approve -var="use_existing_key_pair=true" || {
            echo "❌ Both attempts failed. Check the logs above for specific errors"
            echo "💡 For development, you might need to:"
            echo "   1. Check if resources already exist with different names"
            echo "   2. Run 'terraform destroy' and try again"
            echo "   3. Check AWS permissions"
            exit 1
          }
        }
      env:
        TF_IN_AUTOMATION: true

    - name: Terraform Destroy
      if: github.event.inputs.action == 'destroy'
      run: |
        cd terraform
        terraform destroy -auto-approve
      env:
        TF_IN_AUTOMATION: true

    - name: Output Instance Info
      if: github.event.inputs.action == 'apply'
      run: |
        cd terraform
        echo "## Infrastructure Outputs" >> $GITHUB_STEP_SUMMARY
        terraform output -json | jq -r 'to_entries[] | "- **\(.key)**: \(.value.value)"' >> $GITHUB_STEP_SUMMARY


    - name: Display Connection Info
      if: github.event.inputs.action == 'apply'
      run: |
        cd terraform
        INSTANCE_IP=$(terraform output -raw instance_public_ip)
        DOMAIN=$(terraform output -json dns_configuration | jq -r '.domain')

        echo "::notice title=Instance IP::Instance IP is $INSTANCE_IP"
        echo "🚀 Infrastructure deployed successfully!"
        echo "✅ Infrastructure configured - no manual secrets needed"
        echo "📋 Next steps:"
        echo "1. Create DNS A record: $DOMAIN → $INSTANCE_IP"
        echo "2. Run 'Deploy to Lightsail' workflow to configure Nginx"
        echo "3. Deploy your Next.js containers"