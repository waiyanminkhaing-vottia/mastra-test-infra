name: Manage Infrastructure

on:
  workflow_dispatch:
    inputs:
      action:
        description: 'Action to perform'
        required: true
        default: 'plan'
        type: choice
        options:
        - plan
        - apply
        - destroy

env:
  TF_VERSION: '1.7.0'

jobs:
  terraform:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ vars.AWS_REGION || 'ap-northeast-1' }}

    - name: Terraform Init
      run: |
        cd terraform
        terraform init

    - name: Terraform Validate
      if: github.event.inputs.action != 'destroy'
      run: |
        cd terraform
        terraform validate

    - name: Terraform Plan
      id: plan
      run: |
        cd terraform
        echo "Running terraform plan..."
        terraform plan -out=tfplan -detailed-exitcode
      continue-on-error: true
      env:
        TF_IN_AUTOMATION: true

    - name: Terraform Plan Status
      if: steps.plan.outcome == 'failure'
      run: exit 1

    - name: Terraform Apply
      if: github.event.inputs.action == 'apply'
      run: |
        cd terraform
        terraform apply -auto-approve tfplan
      env:
        TF_IN_AUTOMATION: true

    - name: Terraform Destroy
      if: github.event.inputs.action == 'destroy'
      run: |
        cd terraform
        echo "🗑️ Destroying infrastructure..."
        echo "Refreshing Terraform state..."
        terraform refresh -auto-approve || echo "State refresh completed with warnings"
        echo "Listing current resources in state..."
        terraform state list || echo "No resources in state"
        terraform destroy -auto-approve
        echo "✅ Infrastructure destroyed"
      env:
        TF_IN_AUTOMATION: true

    - name: Wait and verify services
      if: github.event.inputs.action == 'apply'
      run: |
        cd terraform

        # Get connection details
        INSTANCE_IP=$(terraform output -raw instance_public_ip)
        SSH_KEY=$(terraform output -raw ssh_private_key)

        # Setup SSH
        mkdir -p ~/.ssh
        echo "$SSH_KEY" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H $INSTANCE_IP >> ~/.ssh/known_hosts

        echo "Waiting for instance setup to complete..."

        # Wait for services to be ready
        ssh -o ConnectTimeout=10 ec2-user@$INSTANCE_IP << 'EOF'
          # Check if setup was already completed or wait for completion
          echo "Checking instance setup status..."
          if [ -f /home/ec2-user/.setup-completed ]; then
            echo "✅ Instance setup already completed"
          else
            echo "Waiting for instance setup to complete..."
            for i in {1..30}; do
              if [ -f /home/ec2-user/.setup-completed ]; then
                echo "✅ Instance setup completed"
                break
              else
                echo "⏳ Setup in progress... ($i/30)"
                sleep 10
              fi
            done
          fi

          # Check Docker service
          echo "Checking Docker service..."
          if sudo systemctl is-active docker >/dev/null; then
            echo "✅ Docker service is active"
            echo "Docker version: $(sudo docker --version)"
          else
            echo "❌ Docker service is not active"
          fi

          # Check Nginx service
          echo "Checking Nginx service..."
          if sudo systemctl is-active nginx >/dev/null; then
            echo "✅ Nginx service is active"
            echo "Nginx version: $(nginx -v 2>&1)"
          else
            echo "❌ Nginx service is not active"
          fi

          # Test health endpoint
          echo "Testing health endpoint..."
          if curl -s --connect-timeout 5 localhost/health | grep -q "healthy"; then
            echo "✅ Health endpoint is responding"
          else
            echo "⚠️ Health endpoint not responding yet"
          fi
        EOF

    - name: Output Instance Info
      if: github.event.inputs.action == 'apply'
      run: |
        cd terraform
        echo "## Infrastructure Outputs" >> $GITHUB_STEP_SUMMARY
        terraform output -json | jq -r 'to_entries[] | "- **\(.key)**: \(.value.value)"' >> $GITHUB_STEP_SUMMARY
