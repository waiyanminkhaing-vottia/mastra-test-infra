name: Manage Infrastructure

on:
  workflow_dispatch:
    inputs:
      action:
        description: 'Action to perform'
        required: true
        default: 'plan'
        type: choice
        options:
        - plan
        - apply
        - destroy

env:
  TF_VERSION: '1.7.0'

jobs:
  terraform:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ vars.AWS_REGION || 'ap-northeast-1' }}

    - name: Terraform Init
      run: |
        cd terraform
        terraform init

    - name: Terraform Plan
      id: plan
      run: |
        cd terraform
        echo "Debugging: SSH_PUBLIC_KEY length: ${#SSH_PUBLIC_KEY}"
        terraform plan -var="ssh_public_key=$SSH_PUBLIC_KEY" -out=tfplan
      continue-on-error: true
      env:
        TF_IN_AUTOMATION: true
        SSH_PUBLIC_KEY: ${{ vars.SSH_PUBLIC_KEY }}

    - name: Terraform Plan Status
      if: steps.plan.outcome == 'failure'
      run: exit 1

    - name: Terraform Apply
      if: github.event.inputs.action == 'apply'
      run: |
        cd terraform
        terraform apply -auto-approve tfplan
      env:
        TF_IN_AUTOMATION: true

    - name: Terraform Destroy
      if: github.event.inputs.action == 'destroy'
      run: |
        cd terraform
        terraform destroy -auto-approve -var="ssh_public_key=$SSH_PUBLIC_KEY"
      env:
        TF_IN_AUTOMATION: true
        SSH_PUBLIC_KEY: ${{ vars.SSH_PUBLIC_KEY }}

    - name: Output Instance Info
      if: github.event.inputs.action == 'apply'
      run: |
        cd terraform
        echo "## Infrastructure Outputs" >> $GITHUB_STEP_SUMMARY
        terraform output -json | jq -r 'to_entries[] | "- **\(.key)**: \(.value.value)"' >> $GITHUB_STEP_SUMMARY

    - name: Create GitHub Secrets for Deploy Workflow
      if: github.event.inputs.action == 'apply'
      env:
        GH_TOKEN: ${{ github.token }}
      run: |
        cd terraform
        INSTANCE_IP=$(terraform output -raw instance_public_ip)
        DOMAIN=$(terraform output -json dns_configuration | jq -r '.domain')

        # Create LIGHTSAIL_HOST secret
        echo "$INSTANCE_IP" | gh secret set LIGHTSAIL_HOST

        # Create LIGHTSAIL_USER secret
        echo "ubuntu" | gh secret set LIGHTSAIL_USER

        echo "âœ… Created GitHub secrets:"
        echo "- LIGHTSAIL_HOST: $INSTANCE_IP"
        echo "- LIGHTSAIL_USER: ubuntu"

    - name: Display Connection Info
      if: github.event.inputs.action == 'apply'
      run: |
        cd terraform
        INSTANCE_IP=$(terraform output -raw instance_public_ip)
        DOMAIN=$(terraform output -json dns_configuration | jq -r '.domain')

        echo "::notice title=Instance IP::Instance IP is $INSTANCE_IP"
        echo "ðŸš€ Infrastructure deployed successfully!"
        echo "âœ… GitHub secrets automatically created for deploy workflow"
        echo "ðŸ“‹ Next steps:"
        echo "1. Create DNS A record: $DOMAIN â†’ $INSTANCE_IP"
        echo "2. Run 'Deploy to Lightsail' workflow to configure Nginx"
        echo "3. Deploy your Next.js containers"