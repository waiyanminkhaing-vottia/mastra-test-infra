name: Manage Ollama Models

on:
  workflow_dispatch:
    inputs:
      action:
        description: 'Action to perform'
        required: true
        default: 'list'
        type: choice
        options:
        - list
        - install
        - uninstall
        - status
      model_name:
        description: 'Model name (for install/uninstall operations)'
        required: false
        type: string
        default: ''
      model_tag:
        description: 'Model tag (optional, e.g., :7b, :13b)'
        required: false
        type: string
        default: ''

jobs:
  manage-ollama:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ vars.AWS_REGION || 'ap-northeast-1' }}

    - name: Get instance details
      id: instance
      run: |
        echo "Setting up connection details..."

        # Get host from Terraform variables (same as other workflows)
        LIGHTSAIL_HOST=$(grep 'default.*=' terraform/variables.tf | grep 'test.dev-maestra.vottia.me' | sed 's/.*"\(.*\)".*/\1/')
        LIGHTSAIL_USER="ec2-user"

        if [ -z "$LIGHTSAIL_HOST" ]; then
          echo "ERROR: Could not extract host from terraform/variables.tf"
          exit 1
        fi

        echo "Host: $LIGHTSAIL_HOST"
        echo "User: $LIGHTSAIL_USER"

        echo "instance_ip=$LIGHTSAIL_HOST" >> $GITHUB_OUTPUT
        echo "instance_user=$LIGHTSAIL_USER" >> $GITHUB_OUTPUT

    - name: Setup SSH
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.LIGHTSAIL_SSH_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H ${{ steps.instance.outputs.instance_ip }} >> ~/.ssh/known_hosts

        # Test SSH connection
        ssh -o ConnectTimeout=10 -o StrictHostKeyChecking=no ${{ steps.instance.outputs.instance_user }}@${{ steps.instance.outputs.instance_ip }} "echo 'SSH connection successful for Ollama management'"

    - name: List models
      if: github.event.inputs.action == 'list'
      run: |
        echo "## Ollama Models" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY

        # Get Ollama status and models
        ssh -o ConnectTimeout=10 ${{ steps.instance.outputs.instance_user }}@${{ steps.instance.outputs.instance_ip }} "
          echo 'Checking Ollama status...'

          if pgrep -f 'ollama serve' >/dev/null; then
            echo '✅ Ollama service is running'

            # List installed models
            echo 'Installed models:'
            if ollama list 2>/dev/null | grep -v 'NAME' | grep -v '^$'; then
              ollama list 2>/dev/null | grep -v 'NAME' | grep -v '^$'
            else
              echo 'No models installed'
            fi

            # Show disk usage
            echo ''
            echo 'Ollama directory size:'
            du -sh ~/.ollama 2>/dev/null || echo 'Ollama directory not found'

          else
            echo '❌ Ollama service is not running'
            echo 'Try: sudo systemctl start ollama (if configured as service)'
            echo 'Or: nohup ollama serve > ~/ollama.log 2>&1 &'
          fi
        " 2>&1 | tee ollama_output.txt

        # Add output to step summary
        echo '```' >> $GITHUB_STEP_SUMMARY
        cat ollama_output.txt >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY

    - name: Install model
      if: github.event.inputs.action == 'install'
      run: |
        if [ -z "${{ github.event.inputs.model_name }}" ]; then
          echo "ERROR: model_name is required for install operation"
          exit 1
        fi

        MODEL_FULL_NAME="${{ github.event.inputs.model_name }}${{ github.event.inputs.model_tag }}"
        echo "Installing model: $MODEL_FULL_NAME"

        ssh -o ConnectTimeout=10 ${{ steps.instance.outputs.instance_user }}@${{ steps.instance.outputs.instance_ip }} "
          echo 'Checking Ollama status...'

          if ! pgrep -f 'ollama serve' >/dev/null; then
            echo 'Starting Ollama service...'
            nohup ollama serve > ~/ollama.log 2>&1 &
            sleep 5
          fi

          if pgrep -f 'ollama serve' >/dev/null; then
            echo '✅ Ollama service is running'
            echo 'Installing model: $MODEL_FULL_NAME'
            echo 'This may take several minutes depending on model size...'

            if ollama pull '$MODEL_FULL_NAME'; then
              echo '✅ Model installed successfully'
              echo 'Updated model list:'
              ollama list
            else
              echo '❌ Model installation failed'
              exit 1
            fi
          else
            echo '❌ Could not start Ollama service'
            exit 1
          fi
        "

    - name: Uninstall model
      if: github.event.inputs.action == 'uninstall'
      run: |
        if [ -z "${{ github.event.inputs.model_name }}" ]; then
          echo "ERROR: model_name is required for uninstall operation"
          exit 1
        fi

        MODEL_FULL_NAME="${{ github.event.inputs.model_name }}${{ github.event.inputs.model_tag }}"
        echo "Uninstalling model: $MODEL_FULL_NAME"

        ssh -o ConnectTimeout=10 ${{ steps.instance.outputs.instance_user }}@${{ steps.instance.outputs.instance_ip }} "
          echo 'Checking Ollama status...'

          if pgrep -f 'ollama serve' >/dev/null; then
            echo '✅ Ollama service is running'
            echo 'Uninstalling model: $MODEL_FULL_NAME'

            if ollama rm '$MODEL_FULL_NAME'; then
              echo '✅ Model uninstalled successfully'
              echo 'Updated model list:'
              ollama list
            else
              echo '❌ Model uninstall failed (model may not exist)'
              exit 1
            fi
          else
            echo '❌ Ollama service is not running'
            echo 'Cannot uninstall model when service is not running'
            exit 1
          fi
        "

    - name: Check Ollama status
      if: github.event.inputs.action == 'status'
      run: |
        echo "## Ollama System Status" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY

        ssh -o ConnectTimeout=10 ${{ steps.instance.outputs.instance_user }}@${{ steps.instance.outputs.instance_ip }} "
          echo 'System Information:'
          echo 'RAM Usage:'
          free -h
          echo ''
          echo 'Disk Usage:'
          df -h
          echo ''
          echo 'Ollama Process:'
          ps aux | grep ollama || echo 'No Ollama processes found'
          echo ''
          echo 'Ollama Directory:'
          ls -la ~/.ollama/ 2>/dev/null || echo 'Ollama directory not found'
          echo ''
          echo 'Ollama Logs (last 20 lines):'
          tail -20 ~/ollama.log 2>/dev/null || echo 'No Ollama logs found'
        " 2>&1 | tee status_output.txt

        # Add output to step summary
        echo '```' >> $GITHUB_STEP_SUMMARY
        cat status_output.txt >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY

    - name: Summary
      run: |
        echo "## Ollama Management Summary" >> $GITHUB_STEP_SUMMARY
        echo "- **Action**: ${{ github.event.inputs.action }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Model**: ${{ github.event.inputs.model_name }}${{ github.event.inputs.model_tag }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Status**: ✅ Completed successfully" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Popular Models to Try:" >> $GITHUB_STEP_SUMMARY
        echo "- **gemma:2b** - Google's 2B parameter model (fast)" >> $GITHUB_STEP_SUMMARY
        echo "- **phi3:mini** - Microsoft's 3.8B parameter model (good quality)" >> $GITHUB_STEP_SUMMARY
        echo "- **llama3.2:3b** - Meta's 3B parameter model (balanced)" >> $GITHUB_STEP_SUMMARY
        echo "- **qwen2.5:3b** - Alibaba's 3B parameter model (multilingual)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Usage:" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
        echo "# SSH into instance and run:" >> $GITHUB_STEP_SUMMARY
        echo "ollama run <model-name>" >> $GITHUB_STEP_SUMMARY
        echo "# Example: ollama run gemma:2b" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY