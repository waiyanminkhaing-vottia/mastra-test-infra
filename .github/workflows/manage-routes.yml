name: Manage Nginx Routes

on:
  workflow_dispatch:
    inputs:
      action:
        description: 'Action to perform'
        required: true
        type: choice
        options:
          - add
          - edit
          - delete
          - list
      route_name:
        description: 'Route name (required for add/edit/delete)'
        required: false
        type: string
      route_path:
        description: 'Route path (e.g., /dashboard for Next.js, / for normal apps)'
        required: false
        type: string
      target_port:
        description: 'Target port (e.g., 3000)'
        required: false
        type: string
      route_type:
        description: 'Route type'
        required: false
        type: choice
        options:
          - nextjs
          - normal
        default: 'normal'

jobs:
  manage-routes:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Validate inputs
        run: |
          ACTION="${{ github.event.inputs.action }}"
          ROUTE_NAME="${{ github.event.inputs.route_name }}"
          ROUTE_PATH="${{ github.event.inputs.route_path }}"
          TARGET_PORT="${{ github.event.inputs.target_port }}"

          if [ "$ACTION" != "list" ]; then
            if [ -z "$ROUTE_NAME" ]; then
              echo "‚ùå Error: route_name is required for $ACTION action"
              exit 1
            fi
          fi

          if [ "$ACTION" = "add" ] || [ "$ACTION" = "edit" ]; then
            if [ -z "$ROUTE_PATH" ] || [ -z "$TARGET_PORT" ]; then
              echo "‚ùå Error: route_path and target_port are required for $ACTION action"
              exit 1
            fi

            # Validate port is a number
            if ! [[ "$TARGET_PORT" =~ ^[0-9]+$ ]]; then
              echo "‚ùå Error: target_port must be a number"
              exit 1
            fi

            # Validate path format
            if [[ ! "$ROUTE_PATH" =~ ^/ ]]; then
              echo "‚ùå Error: route_path must start with /"
              exit 1
            fi
          fi

          echo "‚úÖ Input validation passed"

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: List routes
        if: github.event.inputs.action == 'list'
        run: |
          python3 << 'EOF'
          import json
          import os

          routes_file = 'nginx-routes.json'

          if not os.path.exists(routes_file):
              print("‚ö†Ô∏è  No routes configured yet")
              exit(0)

          with open(routes_file, 'r') as f:
              config = json.load(f)

          routes = config.get('routes', [])

          if not routes:
              print("‚ö†Ô∏è  No routes configured")
          else:
              print("üìã Current Routes:")
              print()
              for idx, route in enumerate(routes, 1):
                  print(f"{idx}. {route['name']}")
                  print(f"   Type: {route.get('route_type', 'normal')}")
                  print(f"   Path: {route['path']}")
                  print(f"   Target: localhost:{route['target_port']}")
                  print()
          EOF

      - name: Add route
        if: github.event.inputs.action == 'add'
        run: |
          python3 << 'EOF'
          import json
          import os

          route_name = "${{ github.event.inputs.route_name }}"
          route_path = "${{ github.event.inputs.route_path }}"
          target_port = "${{ github.event.inputs.target_port }}"
          route_type = "${{ github.event.inputs.route_type }}"

          routes_file = 'nginx-routes.json'

          # Load existing routes
          if os.path.exists(routes_file):
              with open(routes_file, 'r') as f:
                  config = json.load(f)
          else:
              config = {'routes': []}

          # Check if route already exists
          for route in config['routes']:
              if route['name'] == route_name:
                  print(f"‚ùå Error: Route '{route_name}' already exists")
                  exit(1)
              if route['path'] == route_path:
                  print(f"‚ùå Error: Path '{route_path}' is already used by route '{route['name']}'")
                  exit(1)

          # Add new route
          new_route = {
              'name': route_name,
              'type': 'proxy',
              'route_type': route_type,
              'path': route_path,
              'target_port': int(target_port)
          }

          config['routes'].append(new_route)

          # Save updated routes
          with open(routes_file, 'w') as f:
              json.dump(config, f, indent=2)

          print(f"‚úÖ Added route '{route_name}' successfully")
          print(f"   Type: {route_type}")
          print(f"   Path: {route_path}")
          print(f"   Target: localhost:{target_port}")
          EOF

      - name: Edit route
        if: github.event.inputs.action == 'edit'
        run: |
          python3 << 'EOF'
          import json
          import os

          route_name = "${{ github.event.inputs.route_name }}"
          route_path = "${{ github.event.inputs.route_path }}"
          target_port = "${{ github.event.inputs.target_port }}"
          route_type = "${{ github.event.inputs.route_type }}"

          routes_file = 'nginx-routes.json'

          if not os.path.exists(routes_file):
              print("‚ùå Error: No routes file found")
              exit(1)

          with open(routes_file, 'r') as f:
              config = json.load(f)

          # Find and update route
          found = False
          for route in config['routes']:
              if route['name'] == route_name:
                  found = True
                  old_path = route['path']
                  old_port = route['target_port']
                  old_type = route.get('route_type', 'normal')

                  route['path'] = route_path
                  route['target_port'] = int(target_port)
                  route['route_type'] = route_type

                  print(f"‚úÖ Updated route '{route_name}'")
                  print(f"   Type: {old_type} ‚Üí {route_type}")
                  print(f"   Path: {old_path} ‚Üí {route_path}")
                  print(f"   Port: {old_port} ‚Üí {target_port}")
                  break

          if not found:
              print(f"‚ùå Error: Route '{route_name}' not found")
              exit(1)

          # Save updated routes
          with open(routes_file, 'w') as f:
              json.dump(config, f, indent=2)
          EOF

      - name: Delete route
        if: github.event.inputs.action == 'delete'
        run: |
          python3 << 'EOF'
          import json
          import os

          route_name = "${{ github.event.inputs.route_name }}"

          routes_file = 'nginx-routes.json'

          if not os.path.exists(routes_file):
              print("‚ùå Error: No routes file found")
              exit(1)

          with open(routes_file, 'r') as f:
              config = json.load(f)

          # Find and remove route
          initial_count = len(config['routes'])
          config['routes'] = [r for r in config['routes'] if r['name'] != route_name]

          if len(config['routes']) == initial_count:
              print(f"‚ùå Error: Route '{route_name}' not found")
              exit(1)

          # Save updated routes
          with open(routes_file, 'w') as f:
              json.dump(config, f, indent=2)

          print(f"‚úÖ Deleted route '{route_name}'")
          EOF

      - name: Commit changes
        if: github.event.inputs.action != 'list'
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          git add nginx-routes.json

          if git diff --staged --quiet; then
            echo "No changes to commit"
            exit 0
          fi

          ACTION="${{ github.event.inputs.action }}"
          ROUTE_NAME="${{ github.event.inputs.route_name }}"

          git commit -m "${ACTION^} nginx route: ${ROUTE_NAME}"
          git push

      - name: Configure AWS credentials
        if: github.event.inputs.action != 'list'
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION || 'ap-northeast-1' }}

      - name: Setup Terraform
        if: github.event.inputs.action != 'list'
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: '1.7.0'

      - name: Get instance connection info
        if: github.event.inputs.action != 'list'
        id: get-instance
        run: |
          cd terraform
          terraform init -input=false > /dev/null

          # Check if state file exists and has resources
          if [ ! -f terraform.tfstate ] || [ "$(terraform state list 2>/dev/null | wc -l)" -eq 0 ]; then
            echo "‚ö†Ô∏è  Warning: Infrastructure not deployed yet"
            echo "deployed=false" >> $GITHUB_OUTPUT
            exit 0
          fi

          INSTANCE_IP=$(terraform output -raw instance_public_ip 2>/dev/null || echo "")
          SSH_KEY=$(terraform output -raw ssh_private_key 2>/dev/null || echo "")

          if [ -z "$INSTANCE_IP" ] || [ -z "$SSH_KEY" ]; then
            echo "‚ö†Ô∏è  Warning: Infrastructure not fully deployed"
            echo "deployed=false" >> $GITHUB_OUTPUT
          else
            echo "‚úÖ Infrastructure found"
            echo "deployed=true" >> $GITHUB_OUTPUT
            echo "instance_ip=$INSTANCE_IP" >> $GITHUB_OUTPUT

            # Save SSH key
            mkdir -p ~/.ssh
            echo "$SSH_KEY" > ~/.ssh/id_rsa
            chmod 600 ~/.ssh/id_rsa
            ssh-keyscan -H $INSTANCE_IP >> ~/.ssh/known_hosts 2>/dev/null
          fi

      - name: Deploy routes to server
        if: github.event.inputs.action != 'list' && steps.get-instance.outputs.deployed == 'true'
        run: |
          INSTANCE_IP="${{ steps.get-instance.outputs.instance_ip }}"

          echo "üì§ Deploying routes to server..."

          # Copy routes file to server
          scp -o StrictHostKeyChecking=no nginx-routes.json ec2-user@$INSTANCE_IP:/tmp/

          # Deploy routes and reload nginx
          ssh -o StrictHostKeyChecking=no ec2-user@$INSTANCE_IP << 'REMOTE_EOF'
            # Move routes file
            sudo mkdir -p /etc/nginx/routes
            sudo mv /tmp/nginx-routes.json /etc/nginx/routes/

            # Generate nginx configuration
            python3 << 'PYTHON_EOF'
          import json

          # Read routes from JSON file
          try:
              with open('/etc/nginx/routes/nginx-routes.json', 'r') as f:
                  config = json.load(f)
          except:
              config = {'routes': []}

          # Generate nginx server block
          nginx_config = '''server {
              listen 80 default_server;
              server_name _;

              # Security headers
              add_header X-Frame-Options "SAMEORIGIN" always;
              add_header X-Content-Type-Options "nosniff" always;
              add_header X-XSS-Protection "1; mode=block" always;

              client_max_body_size 10M;

          '''

          # Add routes from JSON
          root_route_exists = False
          for route in config.get('routes', []):
              if route['type'] == 'proxy':
                  path = route['path']
                  port = route['target_port']
                  route_type = route.get('route_type', 'normal')

                  # Handle root path specially
                  if path == '/' or path == '':
                      root_route_exists = True
                      nginx_config += f'''
              # Route: {route['name']} - root domain ({route_type})
              location / {{
                  proxy_pass http://127.0.0.1:{port}/;
                  proxy_set_header Host $host;
                  proxy_set_header X-Real-IP $remote_addr;
                  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                  proxy_set_header X-Forwarded-Proto $scheme;
              }}
          '''
                  else:
                      if route_type == 'nextjs':
                          # Next.js apps with basePath - preserve full path
                          nginx_config += f'''
              # Route: {route['name']} - Next.js with basePath
              location {path}/ {{
                  proxy_pass http://127.0.0.1:{port}{path}/;
                  proxy_set_header Host $host;
                  proxy_set_header X-Real-IP $remote_addr;
                  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                  proxy_set_header X-Forwarded-Proto $scheme;
              }}

              # Handle {path} without trailing slash
              location = {path} {{
                  proxy_pass http://127.0.0.1:{port}{path};
                  proxy_set_header Host $host;
                  proxy_set_header X-Real-IP $remote_addr;
                  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                  proxy_set_header X-Forwarded-Proto $scheme;
              }}
          '''
                      else:
                          # Normal apps - strip prefix
                          nginx_config += f'''
              # Route: {route['name']} - normal app (prefix stripped)
              location {path}/ {{
                  rewrite ^{path}(/.*)?$ $1 break;
                  proxy_pass http://127.0.0.1:{port}/;
                  proxy_set_header Host $host;
                  proxy_set_header X-Real-IP $remote_addr;
                  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                  proxy_set_header X-Forwarded-Proto $scheme;
              }}

              # Handle {path} without trailing slash
              location = {path} {{
                  rewrite ^{path}$ / break;
                  proxy_pass http://127.0.0.1:{port};
                  proxy_set_header Host $host;
                  proxy_set_header X-Real-IP $remote_addr;
                  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                  proxy_set_header X-Forwarded-Proto $scheme;
              }}
          '''

          # Add default location only if no root route exists
          if not root_route_exists:
              nginx_config += '''
              # Default location
              location / {
                  return 200 "Mastra Infrastructure - Routes managed via GitHub Actions\\n";
                  add_header Content-Type text/plain;
              }
          '''

          nginx_config += '''
          }
          '''

          # Write nginx configuration
          with open('/tmp/dynamic-routes.conf', 'w') as f:
              f.write(nginx_config)
          PYTHON_EOF

            # Move generated config to nginx directory
            sudo mv /tmp/dynamic-routes.conf /etc/nginx/conf.d/dynamic-routes.conf

            # Test nginx configuration
            if sudo nginx -t; then
              echo "‚úÖ Nginx configuration is valid"
              sudo systemctl reload nginx
              echo "‚úÖ Nginx reloaded successfully"
            else
              echo "‚ùå Nginx configuration test failed"
              exit 1
            fi
          REMOTE_EOF

          echo "‚úÖ Routes deployed and nginx reloaded"

      - name: Summary
        if: always()
        run: |
          echo "## Route Management Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Action:** ${{ github.event.inputs.action }}" >> $GITHUB_STEP_SUMMARY

          if [ "${{ github.event.inputs.action }}" != "list" ]; then
            echo "**Route Name:** ${{ github.event.inputs.route_name }}" >> $GITHUB_STEP_SUMMARY

            if [ "${{ github.event.inputs.action }}" != "delete" ]; then
              echo "**Route Type:** ${{ github.event.inputs.route_type }}" >> $GITHUB_STEP_SUMMARY
              echo "**Path:** ${{ github.event.inputs.route_path }}" >> $GITHUB_STEP_SUMMARY
              echo "**Target Port:** ${{ github.event.inputs.target_port }}" >> $GITHUB_STEP_SUMMARY
            fi
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Pattern Explanations" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Next.js Apps:** \`localhost:\${port}/path\` - Full path preserved for basePath support" >> $GITHUB_STEP_SUMMARY
          echo "**Normal Apps:** \`localhost:\${port}\` - Path prefix stripped, clean routing" >> $GITHUB_STEP_SUMMARY