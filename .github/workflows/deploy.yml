name: Deploy to Lightsail

on:
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup SSH for deployment
      run: |
        echo "Setting up SSH connection..."

        # Set connection details from Terraform variables
        LIGHTSAIL_HOST=$(grep 'default.*=' terraform/variables.tf | grep 'test.dev-maestra.vottia.me' | sed 's/.*"\(.*\)".*/\1/')
        LIGHTSAIL_USER="ec2-user"

        echo "Host: $LIGHTSAIL_HOST"
        echo "User: $LIGHTSAIL_USER"

        # Export for later steps
        echo "LIGHTSAIL_HOST=$LIGHTSAIL_HOST" >> $GITHUB_ENV
        echo "LIGHTSAIL_USER=$LIGHTSAIL_USER" >> $GITHUB_ENV

        # Setup SSH key
        mkdir -p ~/.ssh
        echo "${{ secrets.LIGHTSAIL_SSH_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa

        # Add host to known_hosts and test connection
        ssh-keyscan -H $LIGHTSAIL_HOST >> ~/.ssh/known_hosts
        ssh -o ConnectTimeout=10 -o StrictHostKeyChecking=no $LIGHTSAIL_USER@$LIGHTSAIL_HOST "echo 'SSH connection successful'"

    - name: Deploy pgvector container
      run: |
        ssh ${{ env.LIGHTSAIL_USER }}@${{ env.LIGHTSAIL_HOST }} << 'EOF'
          # Ensure Docker is running
          if ! sudo docker info >/dev/null 2>&1; then
            echo "Starting Docker service..."
            sudo systemctl start docker
            sleep 3
          fi

          # Create network and volume
          sudo docker network create mastra-test-network --driver bridge 2>/dev/null || true
          sudo docker volume create postgres_data || true

          # Stop and remove existing container
          sudo docker stop postgres-pgvector 2>/dev/null || true
          sudo docker rm postgres-pgvector 2>/dev/null || true

          # Deploy pgvector container
          sudo docker run -d \
            --name postgres-pgvector \
            --network mastra-test-network \
            --restart unless-stopped \
            -p 5432:5432 \
            -e POSTGRES_DB=${{ vars.POSTGRES_DB }} \
            -e POSTGRES_USER=${{ vars.POSTGRES_USER }} \
            -e POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} \
            -e POSTGRES_MULTIPLE_DATABASES="${{ vars.POSTGRES_DB }},${{ vars.AGENT_POSTGRES_DB }}" \
            -v postgres_data:/var/lib/postgresql/data \
            pgvector/pgvector:pg17

          # Clean up
          sudo docker image prune -f
        EOF

    - name: Verify deployment
      run: |
        ssh ${{ env.LIGHTSAIL_USER }}@${{ env.LIGHTSAIL_HOST }} << 'EOF'
          echo "Checking container status..."
          sudo docker ps | grep postgres-pgvector

          echo "Checking container logs..."
          sudo docker logs postgres-pgvector --tail=20

          echo "Waiting for PostgreSQL to be ready..."
          for i in {1..30}; do
            if sudo docker exec postgres-pgvector pg_isready -U ${{ vars.POSTGRES_USER }} >/dev/null 2>&1; then
              echo "✅ PostgreSQL is ready"
              break
            else
              echo "⏳ Waiting for PostgreSQL... ($i/30)"
              sleep 2
            fi
          done

          echo "Verifying databases are created..."
          # Connect to default postgres database (always exists)
          sudo docker exec postgres-pgvector psql -U ${{ vars.POSTGRES_USER }} -d postgres -c "\l"

          echo "Checking for specific databases..."
          sudo docker exec postgres-pgvector psql -U ${{ vars.POSTGRES_USER }} -d postgres -c "\l" | grep -E "${{ vars.POSTGRES_DB }}|${{ vars.AGENT_POSTGRES_DB }}" || echo "Note: Custom databases may be created by POSTGRES_MULTIPLE_DATABASES"

          echo "Checking pgvector extension..."
          # Check extension in postgres database
          sudo docker exec postgres-pgvector psql -U ${{ vars.POSTGRES_USER }} -d postgres -c "SELECT * FROM pg_extension WHERE extname = 'vector';" || echo "pgvector extension not found in postgres database"

          # Try to create and check custom databases if they don't exist
          echo "Ensuring custom databases exist..."
          echo "Creating database: ${{ vars.POSTGRES_DB }}"
          sudo docker exec postgres-pgvector psql -U ${{ vars.POSTGRES_USER }} -d postgres -c "CREATE DATABASE \"${{ vars.POSTGRES_DB }}\";" || echo "Database ${{ vars.POSTGRES_DB }} already exists or creation failed"

          echo "Creating database: ${{ vars.AGENT_POSTGRES_DB }}"
          sudo docker exec postgres-pgvector psql -U ${{ vars.POSTGRES_USER }} -d postgres -c "CREATE DATABASE \"${{ vars.AGENT_POSTGRES_DB }}\";" || echo "Database ${{ vars.AGENT_POSTGRES_DB }} already exists or creation failed"

          # Check pgvector extension in custom database
          echo "Installing pgvector extension in custom databases..."
          sudo docker exec postgres-pgvector psql -U ${{ vars.POSTGRES_USER }} -d "${{ vars.POSTGRES_DB }}" -c "CREATE EXTENSION IF NOT EXISTS vector;" 2>/dev/null || echo "Failed to create vector extension in ${{ vars.POSTGRES_DB }}"
          sudo docker exec postgres-pgvector psql -U ${{ vars.POSTGRES_USER }} -d "${{ vars.AGENT_POSTGRES_DB }}" -c "CREATE EXTENSION IF NOT EXISTS vector;" 2>/dev/null || echo "Failed to create vector extension in ${{ vars.AGENT_POSTGRES_DB }}"

          # Final verification of both databases
          echo "Final verification of pgvector extension..."
          echo "Checking ${{ vars.POSTGRES_DB }} database:"
          sudo docker exec postgres-pgvector psql -U ${{ vars.POSTGRES_USER }} -d "${{ vars.POSTGRES_DB }}" -c "SELECT * FROM pg_extension WHERE extname = 'vector';" || echo "pgvector not found in ${{ vars.POSTGRES_DB }}"

          echo "Checking ${{ vars.AGENT_POSTGRES_DB }} database:"
          sudo docker exec postgres-pgvector psql -U ${{ vars.POSTGRES_USER }} -d "${{ vars.AGENT_POSTGRES_DB }}" -c "SELECT * FROM pg_extension WHERE extname = 'vector';" || echo "pgvector not found in ${{ vars.AGENT_POSTGRES_DB }}"

          echo "Final database list:"
          sudo docker exec postgres-pgvector psql -U ${{ vars.POSTGRES_USER }} -d postgres -c "\l" | grep -E "${{ vars.POSTGRES_DB }}|${{ vars.AGENT_POSTGRES_DB }}"

          echo "✅ Database verification completed"
        EOF

