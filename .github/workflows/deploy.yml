name: Deploy to Lightsail

on:
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_wrapper: false

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ vars.AWS_REGION || 'ap-northeast-1' }}

    - name: Deploy Infrastructure
      run: |
        cd terraform
        terraform init

        # Clean up any existing resources that might conflict
        echo "Cleaning up existing conflicting resources..."

        # Delete existing static IP if it exists
        aws lightsail release-static-ip --static-ip-name "dev-mastra-test-static-ip" --region ap-northeast-1 || echo "Static IP doesn't exist or already deleted"

        # Delete existing key pair if it exists
        aws lightsail delete-key-pair --key-pair-name "dev-mastra-test-key" --region ap-northeast-1 || echo "Key pair doesn't exist or already deleted"

        # Delete existing instance if it exists
        aws lightsail delete-instance --instance-name "dev-mastra-test-instance" --region ap-northeast-1 || echo "Instance doesn't exist or already deleted"

        # Wait a moment for deletions to complete
        sleep 10

        # Try to import existing DNS record if it exists
        terraform import aws_route53_record.domain_record "Z0750357199MM4BM9LHCH_test.dev-maestra.vottia.me_A" || echo "DNS record doesn't exist or already imported"

        # Check what resources exist in state
        echo "Current Terraform state:"
        terraform state list || echo "No resources in state"

        terraform plan -out=tfplan
        terraform apply -auto-approve tfplan

    - name: Setup SSH from Terraform outputs
      run: |
        cd terraform

        echo "Getting Terraform outputs..."
        # Get values from Terraform outputs
        LIGHTSAIL_HOST=$(terraform output -raw instance_public_ip)
        LIGHTSAIL_SSH_KEY=$(terraform output -raw ssh_private_key)
        LIGHTSAIL_USER="ec2-user"

        echo "Host: $LIGHTSAIL_HOST"
        echo "User: $LIGHTSAIL_USER"

        echo "Setting up SSH..."
        # Setup SSH
        mkdir -p ~/.ssh

        # Setup SSH key from Terraform output with proper formatting
        echo "$LIGHTSAIL_SSH_KEY" | tr -d '\r' > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa

        echo "Validating SSH key..."
        # Validate SSH key format
        ssh-keygen -l -f ~/.ssh/id_rsa

        echo "Adding host to known_hosts..."
        ssh-keyscan -H $LIGHTSAIL_HOST >> ~/.ssh/known_hosts

        echo "Testing SSH connection..."
        # Test SSH connection
        if ssh -o ConnectTimeout=30 -o StrictHostKeyChecking=no $LIGHTSAIL_USER@$LIGHTSAIL_HOST "echo 'SSH connection successful'"; then
          echo "✅ SSH connection test passed"
        else
          echo "❌ SSH connection test failed"
          exit 1
        fi

        # Export for later steps
        echo "LIGHTSAIL_HOST=$LIGHTSAIL_HOST" >> $GITHUB_ENV
        echo "LIGHTSAIL_USER=$LIGHTSAIL_USER" >> $GITHUB_ENV

        echo "SSH setup completed successfully"

    - name: Deploy pgvector container
      run: |
        ssh ${{ env.LIGHTSAIL_USER }}@${{ env.LIGHTSAIL_HOST }} << 'EOF'
          # Check if Docker service is running
          echo "Checking Docker service status..."
          sudo systemctl status docker --no-pager || echo "Docker service status check failed"

          echo "Checking if Docker daemon is responding..."
          if sudo docker info >/dev/null 2>&1; then
            echo "✅ Docker is available and responding"
            sudo docker --version
          else
            echo "❌ Docker daemon not responding, checking setup status..."
            echo "=== Setup log (last 30 lines) ==="
            tail -30 /home/ec2-user/setup.log 2>/dev/null || echo "Setup log not found"
            echo "=== Trying to start Docker service ==="
            sudo systemctl start docker || echo "Failed to start Docker"
            sleep 5
            if sudo docker info >/dev/null 2>&1; then
              echo "✅ Docker started successfully"
            else
              echo "❌ Docker still not responding after restart attempt"
              exit 1
            fi
          fi

          # Ensure shared network exists
          if ! sudo docker network ls | grep -q "mastra-test-network"; then
            sudo docker network create mastra-test-network --driver bridge
          fi

          # Create volume if it doesn't exist
          sudo docker volume create postgres_data || true

          # Stop existing container
          sudo docker stop postgres-pgvector || true
          sudo docker rm postgres-pgvector || true

          # Pull latest image
          sudo docker pull pgvector/pgvector:pg17

          # Run pgvector container
          sudo docker run -d \
            --name postgres-pgvector \
            --network mastra-test-network \
            --restart unless-stopped \
            -p 5432:5432 \
            -e POSTGRES_DB=${{ vars.POSTGRES_DB }} \
            -e POSTGRES_USER=${{ vars.POSTGRES_USER }} \
            -e POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} \
            -e POSTGRES_MULTIPLE_DATABASES="${{ vars.POSTGRES_DB }},${{ vars.AGENT_POSTGRES_DB }}" \
            -v postgres_data:/var/lib/postgresql/data \
            pgvector/pgvector:pg17

          # Clean up unused images
          sudo docker image prune -f
        EOF

    - name: Verify deployment
      run: |
        ssh ${{ env.LIGHTSAIL_USER }}@${{ env.LIGHTSAIL_HOST }} << 'EOF'
          sudo docker ps | grep postgres-pgvector
          sudo docker logs postgres-pgvector --tail=20
        EOF

