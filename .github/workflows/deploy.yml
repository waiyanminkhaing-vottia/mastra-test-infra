name: Deploy to Lightsail

on:
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_wrapper: false

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ vars.AWS_REGION || 'ap-northeast-1' }}

    - name: Setup SSH from Terraform outputs
      run: |
        cd terraform
        terraform init

        # Get values from Terraform outputs
        LIGHTSAIL_HOST=$(terraform output -raw instance_public_ip)
        LIGHTSAIL_SSH_KEY=$(terraform output -raw ssh_private_key)
        LIGHTSAIL_USER="ec2-user"

        # Setup SSH
        mkdir -p ~/.ssh

        # Setup SSH key from Terraform output
        echo "$LIGHTSAIL_SSH_KEY" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa

        # Validate SSH key format
        if ! ssh-keygen -l -f ~/.ssh/id_rsa >/dev/null 2>&1; then
          echo "❌ Invalid SSH key format"
          exit 1
        fi

        ssh-keyscan -H $LIGHTSAIL_HOST >> ~/.ssh/known_hosts

        # Export for later steps
        echo "LIGHTSAIL_HOST=$LIGHTSAIL_HOST" >> $GITHUB_ENV
        echo "LIGHTSAIL_USER=$LIGHTSAIL_USER" >> $GITHUB_ENV


    - name: Deploy pgvector container
      run: |
        ssh ${{ env.LIGHTSAIL_USER }}@${{ env.LIGHTSAIL_HOST }} << 'EOF'
          # Ensure shared network exists
          if ! docker network ls | grep -q "mastra-test-network"; then
            docker network create mastra-test-network --driver bridge
          fi

          # Create volume if it doesn't exist
          docker volume create postgres_data || true

          # Stop existing container
          docker stop postgres-pgvector || true
          docker rm postgres-pgvector || true

          # Pull latest image
          docker pull pgvector/pgvector:pg17

          # Run pgvector container
          docker run -d \
            --name postgres-pgvector \
            --network mastra-test-network \
            --restart unless-stopped \
            -p 5432:5432 \
            -e POSTGRES_DB=${{ vars.POSTGRES_DB }} \
            -e POSTGRES_USER=${{ vars.POSTGRES_USER }} \
            -e POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} \
            -e POSTGRES_MULTIPLE_DATABASES="${{ vars.POSTGRES_DB }},${{ vars.AGENT_POSTGRES_DB }}" \
            -v postgres_data:/var/lib/postgresql/data \
            pgvector/pgvector:pg17

          # Clean up unused images
          docker image prune -f
        EOF

    - name: Verify deployment
      run: |
        ssh ${{ env.LIGHTSAIL_USER }}@${{ env.LIGHTSAIL_HOST }} << 'EOF'
          docker ps | grep postgres-pgvector
          docker logs postgres-pgvector --tail=20
        EOF